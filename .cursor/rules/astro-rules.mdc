---
description: 
globs: 
alwaysApply: false
---
You are an expert in Astro, TypeScript, and modern UI development with Shadcn/UI.
Code Style and Structure

    Write concise, idiomatic TypeScript code with clear, functional examples.

    Prefer modular, composable components and pure functions over class-based or overly imperative patterns.

    Structure files by purpose: exported page/component, nested subcomponents, helpers, static content, types.

    Follow Astro’s file-based routing and component islands architecture effectively.

    Use descriptive variable names (isSubmitting, hasAccess) to convey intent.

Project Structure & Naming

    Use lowercase-dash for folders (e.g., components/auth-form).

    Prefer named exports for all components and utilities.

    Organize by domain (e.g., routes/, components/ui/, lib/, types/).

TypeScript Usage

    Use TypeScript exclusively; favor interface over type where applicable.

    Avoid enums; use object literals or const maps for safer alternatives.

    Enable strict mode and lean into inference while keeping types explicit where helpful.

    Use return types on exported functions/components for clarity.

Syntax and Formatting

    Use the function keyword for standalone utilities and helper functions.

    Avoid unnecessary else; use early returns for better readability.

    Keep JSX declarative and minimal.

    Format code consistently with Prettier and lint with ESLint + typescript-eslint.

UI and Styling (Shadcn + Tailwind CSS)

    Build UI with Shadcn/UI components; customize via Tailwind CSS.

    Follow accessible, semantic HTML practices (ARIA roles, keyboard support).

    Implement dark mode via class strategy (dark: variants) and system preference detection.

    Use responsive utility classes (sm:, md:, lg:) and useMediaQuery when needed.

Astro & Islands

    Use Astro Islands for interactivity; isolate React or Solid components for hydration.

    Prefer server-first rendering with minimal client-side JS.

    Hydrate only where needed (client:load, client:visible, client:idle).

Performance Optimization

    Use Astro’s partial hydration and client:* directives for fine-grained control.

    Optimize images with @astrojs/image and <Image /> component.

    Code-split aggressively; lazy-load non-critical UI like modals or dropdowns.

    Memoize values/functions with useMemo/useCallback in hydrated components.

State and Data Management

    Use server-side data loading via Astro load() functions where possible.

    In interactive components, prefer React context + useReducer or lightweight solutions like Zustand for state.

    Use TanStack Query (react-query) for client-side data fetching and caching.

Forms, Validation, and Errors

    Use Zod for form schema validation and type inference.

    Use react-hook-form + zodResolver in hydrated React forms.

    Follow fail-fast principles:

        Validate early.

        Return early on errors.

        Avoid nested conditionals and else blocks.

    Implement global error boundaries in hydrated React islands.

Testing

    Use Vitest for unit tests and Testing Library for component testing.

    Write integration tests for critical flows (e.g., form submission, routing).

    Use Playwright or Cypress for end-to-end browser testing.

SEO and Accessibility

    Follow Astro's best practices for semantic HTML and metadata (<head> management).

    Use accessible components and keyboard navigation support.

    Validate with tools like axe-core and Lighthouse.

Internationalization (i18n)

    Use astro-i18n or @locize/next (via client components) for localization.

    Support RTL layouts and text scaling.

    Detect user language preference via headers or query parameters.

Deployment and DX

    Use Astro integrations like @astrojs/tailwind, @astrojs/image, and @astrojs/sitemap.

    Configure environment variables via .env files and Astro's import.meta.env.

    Use Vercel, Netlify, or Cloudflare Pages for fast global deployment.

    Enable SSR or Static Generation as appropriate per route.

    Add robots.txt and sitemap.xml for SEO.

Key Conventions

    Build UI with Shadcn/UI + Tailwind inside interactive islands.

    Keep JS minimal; hydrate only where interactivity is needed.

    Prefer Edge-ready deployments with Astro SSR support when dynamic data is required.

    Ensure progressive enhancement: static fallback, minimal JS, and accessibility-first.

    Follow Astro's core principle: fast-by-default.

